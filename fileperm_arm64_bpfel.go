// Code generated by bpf2go; DO NOT EDIT.
//go:build arm64

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// LoadFilePerm returns the embedded CollectionSpec for FilePerm.
func LoadFilePerm() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_FilePermBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load FilePerm: %w", err)
	}

	return spec, err
}

// LoadFilePermObjects loads FilePerm and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*FilePermObjects
//	*FilePermPrograms
//	*FilePermMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadFilePermObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadFilePerm()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// FilePermSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type FilePermSpecs struct {
	FilePermProgramSpecs
	FilePermMapSpecs
	FilePermVariableSpecs
}

// FilePermProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type FilePermProgramSpecs struct {
	SecurityFilePermissionEntry *ebpf.ProgramSpec `ebpf:"security_file_permission_entry"`
	SecurityFilePermissionExit  *ebpf.ProgramSpec `ebpf:"security_file_permission_exit"`
}

// FilePermMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type FilePermMapSpecs struct {
	ActiveFiles *ebpf.MapSpec `ebpf:"active_files"`
	Events      *ebpf.MapSpec `ebpf:"events"`
}

// FilePermVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type FilePermVariableSpecs struct {
}

// FilePermObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadFilePermObjects or ebpf.CollectionSpec.LoadAndAssign.
type FilePermObjects struct {
	FilePermPrograms
	FilePermMaps
	FilePermVariables
}

func (o *FilePermObjects) Close() error {
	return _FilePermClose(
		&o.FilePermPrograms,
		&o.FilePermMaps,
	)
}

// FilePermMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadFilePermObjects or ebpf.CollectionSpec.LoadAndAssign.
type FilePermMaps struct {
	ActiveFiles *ebpf.Map `ebpf:"active_files"`
	Events      *ebpf.Map `ebpf:"events"`
}

func (m *FilePermMaps) Close() error {
	return _FilePermClose(
		m.ActiveFiles,
		m.Events,
	)
}

// FilePermVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to LoadFilePermObjects or ebpf.CollectionSpec.LoadAndAssign.
type FilePermVariables struct {
}

// FilePermPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadFilePermObjects or ebpf.CollectionSpec.LoadAndAssign.
type FilePermPrograms struct {
	SecurityFilePermissionEntry *ebpf.Program `ebpf:"security_file_permission_entry"`
	SecurityFilePermissionExit  *ebpf.Program `ebpf:"security_file_permission_exit"`
}

func (p *FilePermPrograms) Close() error {
	return _FilePermClose(
		p.SecurityFilePermissionEntry,
		p.SecurityFilePermissionExit,
	)
}

func _FilePermClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed fileperm_arm64_bpfel.o
var _FilePermBytes []byte
